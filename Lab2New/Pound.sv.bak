module Pound (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW);
	output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
	output logic [9:0] LEDR;
	input logic CLOCK_50;
	input logic [3:0] KEY;
	input logic [9:0] SW;
	//boolean flag values
	integer resetFlag, stateLevelHigh, stateLevelLow, stateIncreasingWater, stateDecreasingWater, stateArriving, stateDeparting;
	assign reset = KEY[0];
	
	//integer values
	integer waterLevelheight;
	//reset declaration
	assign reset = ~KEY[0];

	//Clock setup
	parameter whichClock = 0;
	logic clk;
	clock_divider cdiv1 (CLOCK_50, clk);
	
	//ledControl
	logic [3:0]ledState;
	assign LEDR[3:0] = ledState[3:0];
	assign LEDR[9:4] = 6'b0;
	
	//counter control
	integer timeCounter, timerOnFlag;
	
	//HEX control
	integer minutes,tens,ones;
	assign minutes = timeCounter/60;
	//assign tens = (timeCounter % 60)/10;
	//assign ones = (timeCounter % 60) % 10;
	always
		case (minutes)
			// 	 Light: 6543210
			0: HEX2 = 7'b1111111; // 0
			1: HEX2 = ~7'b0000110; // 1
			2: HEX2 = ~7'b1011011; // 2
			3: HEX2 = ~7'b1001111; // 3
			4: HEX2 = ~7'b1100110; // 4
			5: HEX2 = ~7'b1101101; // 5
			default: HEX2 = 7'b1111111;
		endcase
	
	always @(posedge CLOCK_50)
		//reset state
		if (~reset) begin //reset to low water state
			waterLevelHeight <= 0;
			stateLevelLow <= 1;
			stateArriving <= 0;
			stateLevelHigh <= 0; 
			stateIncreasingWater<=0;
			stateDecreasingWater<=0;
			stateDeparting <= 0;
			ledState <= 4'b1000;
			timeCounter <= 0;
			timerOnFlag <= 0;
		end
		if(stateLevelLow) begin //ledControl
			ledState <= 4'b1000;
		end
		if(stateLevelLow && SW[0]) begin //turn on stateIncreasingWater and stateArriving
			ledState <= 4'b1101;
			stateLevelLow <= 0;
			stateIncreasingWater <= 1;
			stateArriving <= 1;
			timerOnFlag <= 1;
			timeCounter <= 500;
		end
		if(stateIncreasingWater) begin
			//waterlevelcontrol ON
		end
		if(stateArriving) begin
			if (stateIncreasingWater)
				ledState <= 4'b1101;
			else
				ledState <= 4'b0101;
		end
		if (timerOnFlag) begin
			if(timeCounter == 0)
				timeCounter <= 0;
			else
				timeCounter <= timeCounter - 1;
		end
		
		//if (SW[0] && waterLevelHigh)
		//if (SW[0] && waterLevelLow)
endmodule

module Pound_Testbench();

	logic clk; 
	logic [3:0]KEY;
	logic [9:0]SW, LEDR;
	logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;

	Pound dut (.CLOCK_50(clk), .HEX0, .HEX1, .HEX2, .HEX3, .HEX4, .HEX5, .KEY, .LEDR, .SW);

// Set up the clock.
	parameter CLOCK_PERIOD=100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;	
	end
	
	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin
									@(posedge clk);
		KEY[0] <= 0; 			@(posedge clk);
		KEY[0] <= 1; 			@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
		SW[0] <= 1;				@(posedge clk);
									@(posedge clk);
									@(posedge clk);
		SW[0]	<= 0;				@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									@(posedge clk);
									
		$stop; // End the simulation.
	end
endmodule